# This is a BSDBuild configure script source. The ./configure script is
# generated from this file via mkconfigure(1). For more information, see:
# http://bsdbuild.hypertriton.com/.

REGISTER("--with-maximum-optimization",	"Activate maximum possible compile and link optimization"		)
REGISTER("--enable-debug",		"General debugging. Deactivated by default."				)
REGISTER("--disable-udp",		"Use udp socket input module. Activated by default."			)
REGISTER("--disable-unix",		"Use unix socket domain input module. Activated by default."		)
REGISTER("--disable-file",		"Use file/pip input module. Activated by default."			)
REGISTER("--disable-streams",		"Use streams input module. Activated by default."			)
REGISTER("--disable-classic",		"Use classic output module. Activated by default."			)
REGISTER("--disable-tcp",		"Use tcp input and output modules. Activated by default."		)
REGISTER("--disable-oracle8i",		"Use Oracle8i output module. Activated by default."			)
REGISTER("--disable-mysql",		"Use mysql MySQL output module. Activated by default."			)
REGISTER("--disable-pgsql",		"Use pgsql PostgreSQL output module. Activated by default."		)
REGISTER("--disable-peo",		"Use peo log integrity verification module. Activated by default."	)
REGISTER("--disable-regex",		"Use regex pattern matching output module. Activated by default."	)

# Name and version
HDEFINE(PROGNAME, "sosyslog")
HDEFINE(VERSION, "1.3.3")

# Check for a C compiler. If one exists, ${HAVE_CC} will be set
CHECK(cc)

# VARS
MANPAGES5="syslog.conf.5"
MANPAGES3="syslogd.3"
MDEFINE(MLIBNAME,	"lib${PROGNAME}.so.${VERSION}")
MDEFINE(MLIBNAME_NOPREFIX,	"${PROGNAME}.so.${VERSION}")
MAIL_CONTACT="rhaamo@gruik.at"
check_header_state=no

# Defines
HDEFINE(MLIBNAME_STR, ${MLIBNAME})
HDEFINE(SOSYSLOG_VERSION_STR, ${VERSION})
HDEFINE(INSTALL_LIBDIR,	"${PREFIX}/lib")
HDEFINE(PID_DIR, "/var/run")	# FIXME
HDEFINE(PID_FILE, "syslog.pid")	# FIXME

CHECK(dlopen)
if [ "${HAVE_DLOPEN}" != "yes" ]; then
    echo "Could not find DLOPEN"
    exit 1
else
    L_SYSLOGD_LIBS="-ldl"
fi

if [ "${with_maximum_optimization}" = "yes" -o ] ; then
    MAXOPT="yes"
else
    MAXOPT="no"
fi

# TODO: use --with-daemon-name=blah
MDEFINE(SOSYSLOG_DAEMON_NAME,	${PROGNAME}d)

echo -n "checking Operating System to set libraries flags... "
UNAME=`uname`
if test "${UNAME}" = "OpenBSD" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(SYMBOL_PREFIX,	"_")

    MDEFINE(SHARED_PARAMS,	"-Bshareable")
    MDEFINE(DCCFLAGS,		"-fPIC")

    echo "OpenBSD"
elif test "${UNAME}" = "FreeBSD" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(SHARED_PARAMS,	"-Bshareable")
    MDEFINE(DCCFLAGS,		"-fPIC")
    L_SYSLOGD_LIBS="${L_SYSLOGD_LIBS} -Wl,-E"

    echo "FreeBSD"
elif test "${UNAME}" = "NetBSD" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(SHARED_PARAMS,	"-Dshareable")
    MDEFINE(DCCFLAGS,		"-fPIC")
    L_SYSLOGD_LIBS="${L_SYSLOGD_LIBS} -Wl,-E"

    echo "NetBSD"
elif test "${UNAME}" = "Linux" ; then
    HDEFINE(DLOPEN_FLAGS,	"RTLD_LAZY | RTLD_GLOBAL")
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(MAIN_CPPFLAGS,	"-Xlinker -E")
    MDEFINE(SHARED_PARAMS,	"-Bshareable")
    MDEFINE(DCCFLAGS,		)

    echo "Linux"
elif test "${UNAME}" = "SunOS" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(_REENTRANT,		1)
    HDEFINE(SYMBOL_PREFIX,	)

    if test "${CC}" = "gcc" ; then
	MDEFINE(DCCFLAGS,	"-Bshared")
    else
	if test "${MAXOPT}" = "yes" ; then
	    MDEFINE(OUR_CFLAGS,	"-g3 -Ofast")
	fi
    fi
    MDEFINE(SHARED_PARAMS,	"-shared -soname ${MLIBNAME} -all")

    echo "SunOS"
elif test "${UNAME}" = "AIX" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY | RTLD_GLOBAL)
    HDEFINE(NEEDS_DLOPEN_NULL,	1)
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(DCCFLAGS,		"-shared")
    MDEFINE(SHARED_PARAMS,	"-lc -bI:libsosyslog.imp -bexpall -bnoentry -brtl")
    cat > src/modules/libsosyslog.imp <<-EOF
    	#! .
	m_dprintf
	logerror
	add_fd_input
	place_signal
	remove_fd_input
	printline
	EOF
    L_SYSLOGD_LIBS="${L_SYSLOGD_LIBS} -Wl,-bexpall"
    echo "AIX"
else
    echo "fail"
    echo "cannot determine system type, failling to defaults"
    HDEFINE(SYMBOL_PREFIX,	)
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)

    MDEFINE(SHARED_PARAMS,	"-Bshareable")
fi




if [ "${enable_debug}" = "yes" ]; then
    HDEFINE(SY_DEBUG, "yes")
    MDEFINE(DEBUG_FLAGS, "-g -ggdb3 -fno-inline")
    END_WITH_DEBUG="yes"
else
    HUNDEF(SY_DEBUG)
    END_WITH_DEBUG="no"
fi

# Modules
temp_res="no"
if test "$UNAME" = "OpenBSD" -o "$UNAME" = "NetBSD"	\
    	-o "$UNAME" = "FreeBSD" -o "$UNAME" = "BSDi"	\
	-o "$UNAME" = "386BSD"  -o "$UNAME" = "ArchBSD"	\
	-o "$UNAME" = "TrustedBSD" ; then
	temp_res="yes";
fi

if [ "${temp_res}" = "yes" ]; then
    MSRCS="${MSRCS} im_bsd.c"
    MANPAGES8="${MANPAGES8} im_bsd.8"
    HDEFINE(HAVE_BSD_IMODULE,	1)
    want_bsd=yes
else
    want_bsd=no
fi

temp_res=no
if [ "$UNAME" = "Linux" ]; then
    temp_res=yes
fi

if [ "${temp_res}" = "yes" ]; then
    CHECK_HEADER(sys/klog.h)
    if [ "${HAVE_SYS_KLOG_H}" = "yes" ]; then
	MSRCS="${MSRCS} im_linux.c"
	MANPAGES8="${MANPAGES8} im_linux.8"
	HDEFINE(HAVE_LINUX_IMODULE,  1)
	want_linux=yes
    else
	exit 1
	want_linux=no
    fi
else
    want_linux=no
fi

temp_res=no
if [ "${enable_udp}" = "no" ]; then
    want_udp=no
else
    CHECK_HEADER(sys/socket.h)
    if [ "${HAVE_SYS_SOCKET_H}" = "yes" ]; then
    	MSRCS="${MSRCS} im_udp.c om_udp.c"
	MANPAGES8="${MANPAGES8} im_udp.8 om_udp.8"
    	HDEFINE(HAVE_UDP_IMODULE,	1)
	want_udp=yes
    else
	want_udp=no
    fi
fi

if [ "${enable_unix}" = "no" ]; then
    want_unix=no
else
    CHECK_HEADER(sys/un.h)
    if [ "${HAVE_SYS_UN_H}" = "yes" ]; then
    	MSRCS="${MSRCS} im_unix.c"
	MANPAGES8="${MANPAGES8} im_unix.c"
    	HDEFINE(HAVE_UNIX_IMODULE,	1)
	want_unix=yes
    else
	want_unix=no
    fi
fi

# Doors should only be used with streams
temp_res=no
if [ "${enable_streams}" = "no" ]; then
    temp_res=yes

    CHECK_HEADER(sys/strlog.h)
    CHECK_HEADER(door.h)

    if test "${HAVE_SYS_STRLOG_H}" = "yes" -a "${HAVE_DOOR_H}" = "yes"; then
	temp_res=yes
    else
	temp_res=no
    fi
fi

if test "$temp_res" = "yes"; then
    MSRCS="${MSRCS} im_streams.c"
    MANPAGES8="${MANPAGES8} im_streams.8"
    SYSLOGD_LIBS="${SYSLOGD_LIBS} -lthread -ldoor"
    HDEFINE(HAVE_STREAMS_IMODULE,	1)
    want_streams=yes
else
    want_streams=no
fi

temp_res=no
if [ "${enable_classic}" = "no" ]; then
    want_classic=no
else
    MSRCS="${MSRCS} om_classic.c ttymsg.c"
    MANPAGES8="${MANPAGES8} om_classic.8"
    HDEFINE(HAVE_CLASSIC_IMODULE,	1)
    want_classic=yes
fi

if [ "${enable_tcp}" = "no" ]; then
    want_tcp=no
else
    CHECK_HEADER(sys/socket.h)
    if [ "${HAVE_SYS_SOCKET_H}" = "yes" ]; then
    	MSRCS="${MSRCS} om_tcp.c im_tcp.c ip_misc.c"
    	MANPAGES8="${MANPAGES8} om_tcp.8 im_tcp.8"
    	HDEFINE(HAVE_TCP_IMODULE,	1)
    	want_tcp=yes
    else
	want_tcp=no
    fi
fi

temp_res=no
if [ "${enable_oracle8i}" = "no" ]; then
    want_oracle8i=no
else
    want_oracle8i=yes
    MSRCS="${MSRCS} om_oracle8i.c"
    MANPAGES8="${MANPAGES8} om_oracle8i.8"
    HDEFINE(HAVE_ORACLE8I_IMODULE,	1)
    USE_SQL="yes"
fi

if [ "${enable_mysql}" = "no" ]; then
    want_mysql=no
else
    MSRCS="${MSRCS} om_mysql.c"
    MANPAGES8="${MANPAGES8} om_mysql.8"
    HDEFINE(HAVE_MYSQL_IMODULE,	1)
    USE_SQL="yes"
    want_mysql=yes
fi

if [ "${enable_pgsql}" = "no" ]; then
    want_pgsql=no
else
    MSRCS="${MSRCS} om_pgsql.c"
    MANPAGES8="${MANPAGES8} om_pgsql.8"
    HDEFINE(HAVE_PGSQL_IMODULE,	1)
    USE_SQL="yes"
    want_pgsql=yes
fi

if [ "${USE_SQL}" = "yes" ]; then
    MSRCS="${MSRCS} sql_misc.c"
fi

if [ "${enable_peo}" = "no" ]; then
    PEO=no
else
    PEO=yes
fi

if [ "${PEO}" = "yes" ]; then
    MSRCS="${MSRCS} om_peo.c"
    MANPAGES8="${MANPAGES8} om_peo.8 peochk.8"

    HASH_SRCS="../peo/hash.c"
    HASH_SRCS_MODULES="../peo/hash.c";
    CHECK(md5)
    if [ "${HAVE_MD5}" = "yes" ]; then
	HASH_SRCS="${HASH_SRCS} ../peo/md5c.c"
	HASH_SRCS_MODULES="${HASH_SRCS_MODULES} ../peo/md5c.c"
    fi
    CHECK(sha1)
    if [ "${HAVE_SHA1}" = "yes" ]; then
	HASH_SRCS="${HASH_SRCS} ../peo/sha1.c"
	HASH_SRCS_MODULES="${HASH_SRCS_MODULES} ../peo/sha1.c"
    fi
    CHECK(rmd160)
    if [ "${HAVE_RMD160}" = "yes" ]; then
	HASH_SRCS="${HASH_SRCS} ../peo/rmd160.c"
	HASH_SRCS_MODULES="${HASH_SRCS_MODULES} ../peo/rmd160.c"
    fi
    if [ -r /dev/srandom ]; then
	HDEFINE(HAVE_SRANDOM,	1)
    fi
    want_peo=yes
else
    want_peo=no
fi

# Last defines
MDEFINE(SYSLOGD_LIBS, ${L_SYSLOGD_LIBS})
MDEFINE(HASH_SRCS,	${HASH_SRCS})
MDEFINE(HASH_SRCS_MODULES,	${HASH_SRCS_MODULES})
MDEFINE(MODULES_SRCS,	${MSRCS})
MDEFINE(MANPAGES3,	${MANPAGES3})
MDEFINE(MANPAGES5,	${MANPAGES5})
MDEFINE(MANPAGES8,	${MANPAGES8})

ARCH=`uname -s`
echo
echo "Building ${PROGNAME}-${VERSION} on ${ARCH}"
echo "      Prefix: ${PREFIX}"
echo "          CC: ${CC}"
echo
echo "Build with:"
echo "      Debug: ${END_WITH_DEBUG}"
echo "      Modules:"
echo "          bsd: ${want_bsd}"
echo "        linux: ${want_linux}"
echo "          udp: ${want_udp}"
echo "         unix: ${want_unix}"
echo "      streams: ${want_streams}"
echo "      classic: ${want_classic}"
echo "          tcp: ${want_tcp}"
echo "     oracle8i: ${want_oracle8i}"
echo "        mysql: ${want_mysql}"
echo "        pgsql: ${want_pgsql}"
echo "          peo: ${want_peo}"
echo
echo "* Configuration successful."
echo "* Use \"make\" and \"make install\" to build and install ${PROGNAME}"

