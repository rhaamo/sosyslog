# This is a BSDBuild configure script source. The ./configure script is
# generated from this file via mkconfigure(1). For more information, see:
# http://bsdbuild.hypertriton.com/.

REGISTER("", "")
REGISTER("--with-maximum-optimization",	"Activate maximum possible compile and link optimization")
REGISTER("--enable-debug",	"General debugging [no]")

REGISTER("", "")
REGISTER("--enable-bsd",	"Use bsd input module. Automatically detected.")
REGISTER("--enable-linux",	"Use linux kernel input module. Automatically detected.")
REGISTER("--enable-udp",	"Use udp socket input module. Activated by default.")
REGISTER("--enable-unix",	"Use unix socket domain input module. Activated by default.")
REGISTER("--enable-file",	"Use file/pip input module. Activated by default.")
REGISTER("--enable-streams",	"Use streams input module. Activated by default.")
REGISTER("--enable-classic",	"Use classic output module. Activated by default.")
REGISTER("--enable-tcp",	"Use tcp input and output modules. Activated by default.")
REGISTER("--enable-oracle8i",	"Use Oracle8i output module. Activated by default.")
REGISTER("--enable-mysql",	"Use mysql MySQL output module. Activated by default.")
REGISTER("--enable-pgsql",	"Use pgsql PostgreSQL output module. Activated by default.")
REGISTER("--enable-peo",	"Use peo log integrity verification module. Activated by default.")
REGISTER("--enable-regex",	"Use regex pattern matching output module. Activated by default.")

# Name and version
HDEFINE(PROGNAME, "sosyslog")
HDEFINE(VERSION, "1.3.3")

# Check for a C compiler. If one exists, ${HAVE_CC} will be set
CHECK(cc)

# VARS
MANPAGES="syslog.conf.5 syslogd.3"
MDEFINE(MLIBNAME,	"lib${PROGNAME}.so.${VERSION}")

CHECK(dlopen)
if [ "${HAVE_DLOPEN}" != "yes" ]; then
    echo "Could not find DLOPEN"
    exit 1
else
    L_SYSLOGD_LIBS="-ldl"
fi

if [ "${with_maximum_optimization}" = "yes" ] ; then
    MAXOPT="yes"
else
    MAXOPT="no"
fi

echo -n "checking Operating System to set libraries flags... "
UNAME=`uname`
if test "${UNAME}" = "OpenBSD" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(SYMBOL_PREFIX,	"_")

    MDEFINE(SHARED_PARAMS,	"-Bshareable")
    MDEFINE(DCCFLAGS,		"-fPIC")

    echo "OpenBSD"
elif test "${UNAME}" = "FreeBSD" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(SHARED_PARAMS,	"-Bshareable")
    MDEFINE(DCCFLAGS,		"-fPIC")
    L_SYSLOGD_LIBS="${L_SYSLOGD_LIBS} -Wl,-E"

    echo "FreeBSD"
elif test "${UNAME}" = "NetBSD" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(SHARED_PARAMS,	"-Dshareable")
    MDEFINE(DCCFLAGS,		"-fPIC")
    L_SYSLOGD_LIBS="${L_SYSLOGD_LIBS} -Wl,-E"

    echo "NetBSD"
elif test "${UNAME}" = "Linux" ; then
    HDEFINE(DLOPEN_FLAGS,	"RTLD_LAZY | RTLD_GLOBAL")
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(MAIN_CPPFLAGS,	"-Xlinker -E")
    MDEFINE(SHARED_PARAMS,	"-Bshareable")
    MDEFINE(DCCFLAGS,		)

    echo "Linux"
elif test "${UNAME}" = "SunOS" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY)
    HDEFINE(_REENTRANT,		1)
    HDEFINE(SYMBOL_PREFIX,	)

    if test "${CC}" = "gcc" ; then
	MDEFINE(DCCFLAGS,	"-Bshared")
    else
	if test "${MAXOPT}" = "yes" ; then
	    MDEFINE(OUR_CFLAGS,	"-g3 -Ofast")
	fi
    fi
    MDEFINE(SHARED_PARAMS,	"-shared -soname ${MLIBNAME} -all")

    echo "SunOS"
elif test "${UNAME}" = "AIX" ; then
    HDEFINE(DLOPEN_FLAGS,	RTLD_LAZY | RTLD_GLOBAL)
    HDEFINE(NEEDS_DLOPEN_NULL,	1)
    HDEFINE(SYMBOL_PREFIX,	)

    MDEFINE(DCCFLAGS,		"-shared")
    MDEFINE(SHARED_PARAMS,	"-lc -bI:libsosyslog.imp -bexpall -bnoentry -brtl")
    cat > src/modules/libsosyslog.imp <<-EOF
    	#! .
	m_dprintf
	logerror
	add_fd_input
	place_signal
	remove_fd_input
	printline
	EOF
    L_SYSLOGD_LIBS="${L_SYSLOGD_LIBS} -Wl,-bexpall"
    echo "AIX"
else
    echo "fail"
    echo "cannot determine system type, failling to defaults"
    HDEFINE(SYMBOL_PREFIX,	)
    HDEFIME(DLOPEN_FLAGS,	RTLD_LAZY)

    MDEFINE(SHARED_PARAMS,	"-Bshareable")
fi
MDEFINE(SYSLOGD_LIBS, ${L_SYSLOGD_LIBS})



if [ "${enable_debug}" = "yes" ]; then
    HDEFINE(SY_DEBUG, "yes")
    MDEFINE(DEBUG_FLAGS, "-g -ggdb3 -fno-inline")
    END_WITH_DEBUG="yes"
else
    HUNDEF(SY_DEBUG)
    END_WITH_DEBUG="no"
fi



ARCH=`uname -s`
echo
echo "Building ${PROGNAME}-${VERSION} on ${ARCH}"
echo "      Prefix: ${PREFIX}"
echo "          CC: ${CC}"
echo
echo "Build with:"
echo "      Debug: ${END_WITH_DEBUG}"
echo
echo "* Configuration successful."
echo "* Use \"make\" and \"make install\" to build and install ${PROGNAME}"

