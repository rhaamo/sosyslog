#	$CoreSDI: Id$
AC_INIT(src/syslogd.h)
AC_CONFIG_HEADER(src/config.h)

MSYSLOG_VERSION=`awk '/#define VERSION/ { print $3 }' src/syslogd.h`
echo msyslog version... $MSYSLOG_VERSION

CFLAGS="-O -ggdb"
LDFLAGS=

AC_PROG_CC
AC_PROG_INSTALL

UNAME=`uname`
if test "$UNAME" = "OpenBSD"
then
	AC_DEFINE(HAVE_OPENBSD)
	AC_MSG_RESULT(OpenBSD system detected)
elif test "$UNAME" = "Linux"
then
	LIBS="$LIBS -ldl"
fi

AC_CHECK_HEADERS(paths.h)

AC_MSG_CHECKING(wheter optreset is needed)
AC_TRY_LINK([#include <unistd.h>],
	[extern int optreset; optreset = 1;],
	[AC_DEFINE(HAVE_OPTRESET) AC_MSG_RESULT(yes)],
	AC_MSG_RESULT(no))

for dir in "/var/run" "/etc"
do
	if test -d $dir
	then
		break
	fi
done
AC_MSG_RESULT(root-mode pid file will go in $dir)
AC_DEFINE_UNQUOTED(PID_DIR, "$dir")

for INSTALL_LIBDIR in "/lib" "/usr/lib" "/usr/local/lib"
do
	if test -d $INSTALL_LIBDIR
	then
		break
	fi
done
AC_MSG_RESULT(dynamic modules will be installed on $INSTALL_LIBDIR)
AC_SUBST(INSTALL_LIBDIR)

for INSTALL_DIR in "/sbin" "/usr/sbin" "/usr/local/sbin"\
		   "bin" "/usr/bin" "/usr/local/bin"
do
	if test -d $INSTALL_DIR
	then
		break
	fi
done
AC_MSG_RESULT(syslogd and tools will be installed on $INSTALL_DIR)
AC_SUBST(INSTALL_DIR)

#AC_ARG_WITH(mysql,
#	[  --with-mysql=DIR        enable MySQL support using libraries in DIR],
#	[with_mysql=$withval],
#	[with_mysql=no])
#test "$with_mysql" = "yes" && AC_DEFINE(ENABLE_MYSQL)
#
#if test "$with_mysql" = "yes"
#then
#	for ac_dir in \
#	/usr/local/mysql \
#	/usr/local/lib/mysql
#	do
#		if test -d "$ac_dir"
#		then
#			with_mysql=$ac_dir
#		fi
#	done
#fi
#
#if test -n "$with_mysql" -a "$with_mysql" != "no"
#then
#	if test "$with_mysql" = "yes"
#	then
#		with_mysql="/usr/local/mysql"	
#	fi
#	echo "Enabling MySQL support in $with_mysql"
#	OMMYSQL_SRC="$OMMYSQL_SRC \$(MYSQL_SRCS)"
#	CFLAGS="$CFLAGS -I$with_mysql/include/mysql"
#	LDFLAGS="$LDFLAGS -L$with_mysql/lib/mysql"
#	OMMYSQL_LIBS="$OMMYSQL_LIBS -lmysqlclient"
#	AC_DEFINE(ENABLE_MYSQL)
#fi

AC_DEFUN(GREP, [
if test -e "$2"
then
	if test "`grep $1 $2`"
	then
		$3
	fi
fi
])


HASH_SRCS="hash.c"
AC_CHECK_FUNC(MD5Init, AC_DEFINE(HAVE_MD5),
	HASH_SRCS="$HASH_SRCS md5c.c")
AC_CHECK_FUNC(SHA1Init, AC_DEFINE(HAVE_SHA1),
	HASH_SRCS="$HASH_SRCS sha1.c")
AC_CHECK_FUNC(RMD160Init, AC_DEFINE(HAVE_RMD160),
	HASH_SRCS="$HASH_SRCS rmd160.c")
AC_SUBST(HASH_SRCS)

AC_DEFUN(CONF_MYSQL, [
for ac_dir in /usr/local/lib/mysql /usr/local/mysql
do
	with_mysql="$ac_dir"
	if test -d "$ac_dir"
	then
		break
	fi
done

CFLAGS="$CFLAGS -I$with_mysql/include/mysql"
LDFLAGS="$LDFLAGS -L$with_mysql/lib/mysql"
LIBS="$LIBS -lmysqlclient"
])

AC_DEFUN(BEGIN_MODULES_CONF, [
STATIC_MODULES="src/static_modules"
MODULES_DIR="src/modules"
FIRST_ADD_OUTPUT=1
FIRST_ADD_INPUT=1
cp -f $STATIC_MODULES.c.in $STATIC_MODULES.c
printf "\
/*\n\
 * Automatically generated static modules header file\n\
 */\n\n" > $STATIC_MODULES.h

SSRCS=""
unix=""
udp=""
bsd=""
linux=""
classic=""
peo=""
mysql=""
pgsql=""
regex=""
eval `cat ./modules.conf`
])

AC_DEFUN(END_MODULES_CONF, [
AC_SUBST(SSRCS)
printf "\treturn(0);\n}\n" >> $STATIC_MODULES.c
])

AC_DEFUN(add_om, [ 
printf "\
extern int om_%s_init (int, char**, struct filed*, char*,\
struct om_hdr_ctx**);\n\
extern int om_%s_doLog (struct filed*, int, char*, struct om_hdr_ctx*);\n" \
$1 $1 >> $STATIC_MODULES.h

printf "\
\tif ( (om = (struct omodule*)calloc(1, sizeof(struct omodule))) == NULL)\n\
\t\treturn(-1);\n" >> $STATIC_MODULES.c

if test "$FIRST_ADD_OUTPUT"
then
        printf "\tolast = omodules = om;\n" >> $STATIC_MODULES.c
        FIRST_ADD_OUTPUT=""
else
        printf "\tolast->om_next = om;\n\tolast = om;\n" >> $STATIC_MODULES.c
fi

printf "\
\tolast->om_name=\"%s\";\n\
\tolast->om_init=om_%s_init;\n\
\tolast->om_doLog=om_%s_doLog;\n" $1 $1 $1 >> $STATIC_MODULES.c

GREP(om_$1_flush, "$MODULES_DIR/$2", [
printf "extern int om_%s_flush (struct filed*, struct om_hdr_ctx*);\n" \
$1 >> $STATIC_MODULES.h
printf "\tolast->om_flush=om_%s_flush;\n" $1 >> $STATIC_MODULES.c
]) 

GREP(om_$1_close, "$MODULES_DIR/$2", [
printf "extern int om_%s_close (struct filed*, struct om_hdr_ctx*);\n" \
$1 >> $STATIC_MODULES.h
printf "\tolast->om_close=om_%s_close;\n\n" $1 >> $STATIC_MODULES.c ]) 

])

AC_DEFUN(add_im, [
printf "\
extern int im_%s_init (struct i_module*, char**, int);\n\
extern int im_%s_getLog (struct i_module*, struct im_msg*);\n" \
$1 $1 >> $STATIC_MODULES.h

printf "\
\tif ( (im = (struct imodule*)calloc(1, sizeof(struct imodule))) == NULL)\n\
\t\treturn(-1);\n" >> $STATIC_MODULES.c

if test "$FIRST_ADD_INPUT"
then
        printf "\tilast = imodules = im;\n" >> $STATIC_MODULES.c
        FIRST_ADD_INPUT=""
else
        printf "\tilast->im_next = im;\n\tilast = im;\n" >> $STATIC_MODULES.c
fi

printf "\
\tilast->im_name=\"%s\";\n\
\tilast->im_init=im_%s_init;\n\
\tilast->im_getLog=im_%s_getLog;\n" $1 $1 $1 >> $STATIC_MODULES.c

GREP(im_$1_close, "$MODULES_DIR/$2", [
printf "extern int im_%s_close (struct i_module*);\n" $1 >> $STATIC_MODULES.h
printf "\tilast->im_close=im_%s_close;\n\n" $1 >> $STATIC_MODULES.c ]) 

])

AC_DEFUN(CHECK_MODULE, [
AC_MSG_CHECKING([configuration for $1 module])
if test "x$2" = "xstatic"
then
	SSRCS="$SSRCS $3" 
	add_$4($1, $3)
	AC_MSG_RESULT([static]);
elif test "x$2" = "xdynamic"
then
	D$1_SRC="$3"
	D$1="lib$1.so.$MSYSLOG_VERSION"
	AC_SUBST(D$1)
	AC_SUBST(D$1_SRC)
	AC_MSG_RESULT([dynamic]);
else
	AC_MSG_RESULT([not activated])
fi
])

BEGIN_MODULES_CONF()
CHECK_MODULE(unix, $unix, im_unix.c, im)
CHECK_MODULE(udp, $udp, im_udp.c, im)
CHECK_MODULE(bsd, $bsd, im_bsd.c, im)
CHECK_MODULE(linux, $linux, im_linux.c, im)
CHECK_MODULE(classic, $classic, om_classic.c, om)
CHECK_MODULE(peo, $peo, om_peo.c, om)
CHECK_MODULE(mysql, $mysql, om_mysql.c sql_misc.c, om)
if test "x$mysql" = "xstatic" -o "x$mysql" = "xdynamic"
then
	CONF_MYSQL()
fi
CHECK_MODULE(pgsql, $pgsql, om_pgsql.c sql_misc.c, om)
CHECK_MODULE(regex, $regex, om_regex.c, om)
END_MODULES_CONF()

AC_SUBST(LIBS)
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_OUTPUT([Makefile src/Makefile src/modules/Makefile src/peo/Makefile])
