#!/bin/sh
#
#  Create header with static modules array.
#
#  arg1 is the header file name
#  arg2 is either "im" or "om"
#  arg3 to argn are the module names
#
#

if [ $# -lt 3 ]; then
	echo "Error on calling script, too few arguments " $0 $*
	exit -1
fi

MTYPE=$2
CFILE=$1
shift 2

if [ "X$MTYPE" != X"im" -a "X$MTYPE" != X"om" ]; then
	echo "Error on calling script, no such module type " $0 $*
	exit -1
fi


printf "/*\n * Autogenerated %s module file: %s\n */\n" $MTYPE $CFILE > $CFILE
printf "#include <syslog.h>"		>> $CFILE
printf "#include \"syslogd.h\""		>> $CFILE
printf "#include <stdlib.h>\n"		>> $CFILE
printf "extern struct "$MTYPE"odule *"$MTYPE"odules;\n"	 >> $CFILE

#
# All function declarations required!
#

for A in $*;do
if [ "X$MTYPE" = X"im" ]; then
	echo "int "$MTYPE"_"$A"_init(struct i_module *, char **, int);"	>> $CFILE
	echo "int "$MTYPE"_"$A"_getLog(struct i_module *, struct im_msg *);"	>> $CFILE
#	echo "int "$MTYPE"_"$A"_close(struct i_module *);\n\n"	>> $CFILE
else
	echo -n "int "$MTYPE"_"$A"_init(int, char **, struct filed *, char *,"	>> $CFILE
        echo " struct om_hdr_ctx **);"	>> $CFILE
	echo -n "int "$MTYPE"_"$A"_doLog(struct filed *, int, char *,"	>> $CFILE
	echo " struct om_hdr_ctx *);"	>> $CFILE
	echo "int "$MTYPE"_"$A"_flush(struct filed *, struct om_hdr_ctx *);"	>> $CFILE
	echo "int "$MTYPE"_"$A"_close(struct filed *, struct om_hdr_ctx *);\n\n"	>> $CFILE
fi
done

#
# Define Xmodules_load function
#

echo "\nvoid\n"$MTYPE"odules_load() {"				>> $CFILE
	echo "\tstruct "$MTYPE"odule *"$MTYPE";\n"	>> $CFILE
	echo -n "\t"$MTYPE"odules = (struct "$MTYPE"odule *)"	>> $CFILE
	echo " calloc( 1, sizeof(struct "$MTYPE"odule));"		>> $CFILE
	echo "\t"$MTYPE" = "$MTYPE"odules;\n"	>> $CFILE

	echo "\tif ("$MTYPE" == NULL)"	>> $CFILE
	echo "\t\treturn;\n"	>> $CFILE
#
#output first module and prepare for loop
#

	echo "\t"$MTYPE"->"$MTYPE"_name = \"$1\";" 		>> $CFILE
	echo "\t"$MTYPE"->"$MTYPE"_init = $MTYPE""_"$1"_init;" 	>> $CFILE
if [ "X$MTYPE" = X"im" ]; then
	echo "\t"$MTYPE"->"$MTYPE"_getLog = $MTYPE""_"$1"_getLog;\n"	>> $CFILE
else
	echo "\t"$MTYPE"->"$MTYPE"_close = $MTYPE""_"$1"_close;"	>> $CFILE
	echo "\t"$MTYPE"->"$MTYPE"_flush = $MTYPE""_"$1"_flush;"	>> $CFILE
	echo "\t"$MTYPE"->"$MTYPE"_doLog = $MTYPE""_"$1"_doLog;\n"	>> $CFILE
fi

shift
# Now loop all other modules
for A in $*;do
	echo -n "\t"$MTYPE"->"$MTYPE"_next = (struct "$MTYPE"odule *)"	>> $CFILE
	echo " calloc( 1, sizeof(struct "$MTYPE"odule));"		>> $CFILE
	echo "\t"$MTYPE" = "$MTYPE"->"$MTYPE"_next;\n" 		>> $CFILE

	echo "\t$MTYPE""->"$MTYPE"_name = \"$A\";" 		>> $CFILE
	echo "\t$MTYPE""->"$MTYPE"_init = $MTYPE""_""$A""_init;"	>> $CFILE
if [ "X$MTYPE" = X"im" ]; then
	echo "\t$MTYPE""->"$MTYPE"_getLog = $MTYPE""_""$A""_getLog;\n"	>> $CFILE
else
	echo "\t$MTYPE""->"$MTYPE"_close = $MTYPE""_""$A""_close;"	>> $CFILE
	echo "\t$MTYPE""->"$MTYPE"_flush = $MTYPE""_""$A""_flush;"	>> $CFILE
	echo "\t$MTYPE""->"$MTYPE"_doLog = $MTYPE""_""$A""_doLog;\n"	>> $CFILE
fi

done
echo "}\n" 				 >> $CFILE
